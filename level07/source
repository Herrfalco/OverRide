#include <stdlib.h>
#include <stdio.h>
#include <string.h>

void			clear_stdin(void) {
	int		c = 0;

	while ((c = getchar()) != '\n' && c != -1);
}

unsigned int	get_unum(void) {
	unsigned int	nb = 0;

	fflush(stdout);
	scanf("%u", &nb);
	clear_stdin();
	return (nb);
}

int				store_number(unsigned int *data) {
	unsigned int		num = 0;
	unsigned int		idx = 0;

	printf(" Number: ");
	num = get_unum();
	printf(" Index: ");
	idx = get_unum();
	if ((idx - (((idx * 2863311531) >> 33) * 3)) == 0
		|| num >> 24 == 0xb7) {
		puts(" *** ERROR! ***");
		puts("   This index is reserved for wil!");
		puts(" *** ERROR! ***");
		return (1);
	}
	data[idx] = num;
	return (0);
}

int				read_number(unsigned int *data) {
	unsigned int 		idx = 0;

	printf(" Index: ");
	idx = get_unum();
	printf(" Number at data[%u] is %u\n", idx, data[idx]);
	return (0);
}

int				main(int argc, char **argv, char **envv) {
	char			**env = envv;
	char			**arg = argv;
	unsigned int	data[100] = { 0 };
	int				ret = 0;
	char			entry[20] = { '\0' };
	
	while (*arg) {
		memset(*arg, '\0', strlen(*arg));
		++arg;
	}
	while (*env) {
		memset(*env, '\0', strlen(*env));
		++env;
	}
	puts("\
----------------------------------------------------\n\
  Welcome to wil's crappy number storage service!   \n\
----------------------------------------------------\n\
 Commands:                                          \n\
    store - store a number into the data storage    \n\
    read  - read a number from the data storage     \n\
    quit  - exit the program                        \n\
----------------------------------------------------\n\
   wil has reserved some storage :>                 \n\
----------------------------------------------------\n\
");
	while (42) {
		printf("Input command: ");
		ret = 1;
		fgets(entry, 20, stdin);
		entry[strlen(entry) - 1] = '\0';
		if (!strncmp(entry, "store", 5)) {
			ret = store_number(data);
		} else if (!strncmp(entry, "read", 4)) {
			ret = read_number(data);
		} else if (!strncmp(entry, "quit", 4)) {
			return (0);
		}
		if (ret)
			printf(" Failed to do %s command\n", entry);
		else
			printf(" Completed %s command successfully\n", entry);
		memset(entry, '\0', 20);
	}
	return (0);
}
